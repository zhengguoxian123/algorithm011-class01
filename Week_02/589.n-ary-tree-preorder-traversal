```
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> preorder(Node* root) {
        int white = 0, gray = 1;
        stack<pair<int, Node*>> s;
        vector<int> ans;

        s.push(make_pair(white, root));
        while (!s.empty()) {
            int color = s.top().first;
            Node* t= s.top().second;
            s.pop();
            if (t == NULL) continue;
            if (color == white) {
                for (auto child = t->children.rbegin(); child != t->children.rend(); child++) {
                    s.push(make_pair(white, *child));
                }
                s.push(make_pair(gray, t));
            } else {
                ans.push_back(t->val);
            }
        }
        return ans;
    }
};



// 思路1+时空复杂度：
// 递归
// 时间O(n)
// 空间O(logN)
// 题解：
// 参考：


// 思路2+时空复杂度：
// 迭代
// 时间O(n)
// 空间O(logN)
// 题解：

class Solution {
public:
    vector<int> preorder(Node* root) {
        int white = 0, gray = 1;
        stack<pair<int, Node*>> s;
        vector<int> ans;

        s.push(make_pair(white, root));
        while (!s.empty()) {
            int color = s.top().first;
            Node* t= s.top().second;
            s.pop();
            if (t == NULL) continue;
            if (color == white) {
                for (auto child = t->children.rbegin(); child != t->children.rend(); child++) {
                    s.push(make_pair(white, *child));
                }
                s.push(make_pair(gray, t));
            } else {
                ans.push_back(t->val);
            }
        }
        return ans;
    }
};
// 参考：94题
```