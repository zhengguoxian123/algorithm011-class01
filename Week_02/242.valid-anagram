```
class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.size() != t.size()) return false;
        
        unordered_map<char, int> counts;
        for (int i = 0; i < s.size(); i++) {
            counts[s[i]]++;
            counts[t[i]]--;
        }
        for (auto count : counts) {
            if (count.second) return false;
        }
        return true;
    }
};






// 思路1+时空复杂度：
// 异位词：字符出现的频次都是一样的
// 审题：大小写是否敏感
//暴力法.分别sort完看是否相等
// O(NlogN)
// 击败5%
// 题解：
// class Solution {
// public:
//     bool isAnagram(string s, string t) {
//         sort(s.begin(), s.end());
//         sort(t.begin(), t.end());
//         return s == t;
//     }
// };
// 参考：极客大学 第二周第5课


// 思路2+时空复杂度：
// hash table 先放进去，再用另一个进行减去即可。
// 时间复杂度O(n) 超过59%
// 空间复杂度O(n)
// 题解：
// class Solution {
// public:
//     bool isAnagram(string s, string t) {
//         if(s.size() != t.size()) return false;
//         const int n = s.size();
//         unordered_map<char, int> counts;
//         for (int i = 0; i < n; i++) {
//             counts[s[i]]++;
//             counts[t[i]]--;
//         }
//         for (auto count : counts) {
//             if (count.second) return false;
//         }
//         return true;
//     }
// };
// 参考：极客大学 第二周第5课
//https://leetcode.com/problems/valid-anagram/discuss/66519/2-C%2B%2B-Solutions-with-Explanations
```