```
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        int white = 0, gray = 1;
        vector<vector<int>> ans;
        int init_level =0;
        stack<pair<pair<int, Node*>, int>> s;
        s.push(make_pair(make_pair(white,root),init_level));
        
        while (!s.empty()) {
            int color = s.top().first.first;
            Node* t = s.top().first.second;
            int level = s.top().second;
            s.pop();
            if (t == NULL) continue;
            if (color == white) {
                for (auto child = t->children.rbegin(); child != t->children.rend(); child++) {
                    s.push(make_pair(make_pair(white, *child),level+1));
                }
                s.push(make_pair(make_pair(gray, t), level));
            } else {
                if (ans.size() == level) {
                    ans.push_back({});
                }
                ans[level].push_back(t->val);
            }
        }
        return ans;

    }
};

// 思路+时空复杂度：
// 递归 和前序中序后续遍历查不多
// 时间O(n)
// 题解：
// class Solution {
// public:
//     vector<vector<int>> levelOrder(Node* root) {
//         vector<vector<int>> ans;
//         levelOrder(root, 0, ans);
//         return ans;
//     }
// private:
//     void levelOrder(Node* root, int d, vector<vector<int>>& ans) {
//         if (!root) return;
//         // 多层vecor初始化
//         if (ans.size() == d) ans.push_back({});
//         ans[d].push_back(root->val);
//         for (auto child : root->children) {
//             levelOrder(child, d+1, ans);
//         }
//     }
// };
// 参考：https://www.jianshu.com/p/e53fdb6e2717

// 思路+时空复杂度：
// 迭代
// 时间O(n)
// 超过91%
// https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/yan-se-biao-ji-fa-yi-chong-tong-yong-qie-jian-ming/
// 参考 94
// 题解：
// class Solution {
// public:
//     vector<vector<int>> levelOrder(Node* root) {
//         int white = 0, gray =1;
//         stack<pair<pair<int, Node*>, int>> s;
//         vector<vector<int>> ans;
//         int init_level = 0;
//         s.push(make_pair(make_pair(white, root), init_level));

//         while (!s.empty()) {
//             int color = s.top().first.first;
//             Node* t = s.top().first.second;
//             int level = s.top().second;
//             s.pop();
//             if (t == NULL) continue;
//             if (color == white) {
//                 for (auto child = t->children.rbegin(); child != t->children.rend(); child++) {
//                     s.push(make_pair(make_pair(white, *child), level+1));   
//                 }   
//                 s.push(make_pair(make_pair(gray,t), level));
//             } else {
//                 if (ans.size() == level) {
//                     ans.push_back({});
//                 }
//                 ans[level].push_back(t->val);
//             }
//         } 
//         return ans;
//     }
// };
```
