```
class Solution {
public:
    void rotate(vector<int>& nums, int k) {

        if (k > nums.size()) {
            k %= nums.size();
        }

        reverse(nums, 0, nums.size()-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, nums.size()-1);
    }
private:
    void reverse(vector<int>& nums, int start, int end) {
        while ( start < end) {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }
    }
};

// 思路1+时空复杂度：
// 暴力解法:
// 把[n-k,n)这个范围的数组复制一份，然后再他的后面进行添加原数组[0,n-k)
// 空间复杂度O(n)
// 时间复杂度O(n)
// 参考：//https://github.com/MisterBooo/LeetCodeAnimation/blob/master/0189-Rotate-Array/Article/0189-Rotate-Array.md
// 题解：
// void rotate(vector<int>& nums, int k) {
//         if(k > nums.size()) {
//             k %= nums.size();
//         }

//         vector<int> new_nums;
//         for (int i = nums.size() -k; i < nums.size(); i++) {
//             new_nums.push_back(nums[i]);
//         }
//         for (int i = 0; i < nums.size()-k;i++) {
//             new_nums.push_back(nums[i]);
//         }
//         nums = new_nums;
//     }



// 思路2+时空复杂度：
// 思路：对数组进行翻转，在分别对他们[0,k-1] [k,size-1]进行翻转
// 时间O(n)
// 空间O(1)
// 参考：(答案有bug，翻转没有++)
//https://github.com/MisterBooo/LeetCodeAnimation/blob/master/0189-Rotate-Array/Article/0189-Rotate-Array.md
// 题解：
// class Solution {
// public:
//     void rotate(vector<int>& nums, int k) {
//         if(k > nums.size()) {
//             k %= nums.size();
//         }
//         reverse(nums, 0, nums.size()-1);
//         reverse(nums, 0, k -1);
//         reverse(nums, k, nums.size()-1);
//     }
// private:
//     void reverse(vector<int>& nums, int start, int end) {
//         while(start < end) {
//             int temp = nums[start];
//             nums[start] = nums[end];
//             nums[end] = temp; 
//             start++;
//             end--;
//         }
//     }
// };
```