```
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (!l1 || !l2) return l1 ? l1 : l2;
        if(l1->val < l2->val) {
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }
};

// 思路+时空复杂度：
// 迭代
// 时间复杂度O(n)

// 题解：
    // ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    //     ListNode dummy(0);
    //     ListNode* tail = &dummy;
    //     while (l1&&l2) {
    //         if (l1->val < l2->val) {
    //             tail->next = l1;
    //             l1= l1->next;
    //         } else {
    //             tail->next = l2;
    //             l2 = l2->next;
    //         }
    //         tail = tail->next;
    //     }
    //     if (l1) tail->next =l1;
    //     if (l2) tail->next = l2;
    //     return dummy.next;
    // }
// 参考(花花)：
// https://www.youtube.com/watch?v=qckKEYP9bBA


// 思路+时空复杂度：
// 递归：
// 题解：
    // ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    //     if (!l1 || !l2) return l1 ? l1 : l2;
    //     if(l1->val < l2->val) {
    //         l1->next = mergeTwoLists(l1->next, l2);
    //         return l1;
    //     } else {
    //         l2->next = mergeTwoLists(l1, l2->next);
    //         return l2;
    //     }
    // }
// 参考(花花)：
// https://www.youtube.com/watch?v=qckKEYP9bBA
```
