######题号：62. 不同路径
######参考：https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-62-unique-paths/

######思路：
######时空复杂度：
动态递归O(MN)
记忆化递归时间O(MN)，节点个数MN
######最优解法：
```
// 动态递推
class Solution1 {
public:
    int uniquePaths(int m, int n) {
        auto f = vector<vector<int>>(n + 1, vector<int>(m + 1, 0));
        f[1][1] = 1;
        
        for (int y = 1; y <= n; ++y) {
            for (int x = 1; x <= m; ++x) {
                if (x == 1 && y == 1) {
                    continue;
                } else {
                    f[y][x] = f[y - 1][x] + f[y][x - 1];
                }
            }
        }
        return f[n][m];
    }
};
```
```
// 记忆化递归
class Solution2 {
public:
    int uniquePaths(int m, int n) {
        f_ = vector<vector<int>>(m + 1, vector<int>(n + 1, 0));
        return helper(m, n);
    }
private:
    vector<vector<int>> f_;

    int helper(int m, int n) {
        // terminate
        if ( m < 0 || n < 0) return 0;
        // process
        if (m == 1 && n == 1) return 1;
        if (f_[m][n] > 0) return f_[m][n];
        // drill down
        int l = helper(m - 1, n);
        int r = helper(m, n - 1);
        f_[m][n] = l + r;
        return f_[m][n];
        // reverse status
    }
};
```

######题号：63. 不同路径 II
######参考：https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-63-unique-paths-ii/
######思路：
######时空复杂度：
######最优解法：
```
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        if (m == 0) return 0;
        int n = obstacleGrid[0].size();
        f_ = vector<vector<int>>(m + 1, vector<int>(n + 1, INT_MAX));
        return helper(m, n, obstacleGrid);
    }
private:
    vector<vector<int>> f_;
    int helper(int m, int n, const vector<vector<int>>& o) {
        // terminate
        if (m <= 0 || n <= 0) return 0;
        if (m == 1 && n == 1) return 1 - o[0][0];
        // process
        if (f_[m][n] != INT_MAX) return f_[m][n];
        if (o[m - 1][n - 1] == 1) {
            f_[m][n] = 0;
        } else {
            f_[m][n] = helper(m - 1, n, o) + helper(m, n - 1, o);
        }
        return f_[m][n];
        // drill down
        // reverse status
    }
};
```
######题号：
######参考：
######思路：
// 记忆化递归，自上而下的
// DP
// 边界条件需要处理一下
// 降维度，滚动数组O(N)
// 直接用原来的，把他给改了

######时空复杂度：
// 记忆化递归:时间O(mn)，空间O(mn)
// DP:时间O(mn)，空间O(1)
######最优解法：
```
class Solution2 {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if (m == 0) return 0;
        int n = grid[0].size();

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) continue;
                if (i == 0) {
                    grid[i][j] += grid[i][j - 1];
                } 
                else if (j == 0) {
                    grid[i][j] += grid[i - 1][j];
                } else {
                    grid[i][j] += min(grid[i][j - 1], grid[i - 1][j]);
                }
            }
        }
        return grid[m - 1][n - 1];
    }
};
```
```
class Solution1 {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if (m == 0) return 0;
        int n = grid[0].size();
        f_ = vector<vector<int>>(m, vector<int>(n, 0));
        
        return helper(grid, n - 1, m - 1, n, m);
    }

private:
    vector<vector<int>> f_;
    long helper(vector<vector<int>>& grid, int x, int y, int n, int m) {
        // terminate
        if (x == 0 && y == 0) return grid[y][x];
        if (x < 0 || y < 0) return INT_MAX;

        // process
        // drill down
        if (f_[y][x] > 0) return f_[y][x];
        int ans = grid[y][x] + min(helper(grid, x - 1, y, n, m), 
                                   helper(grid, x, y - 1, n, m));
        f_[y][x] = ans;
        return ans;
        // reverse status
    }
};

```