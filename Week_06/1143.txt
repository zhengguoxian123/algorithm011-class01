######题号：1143. 最长公共子序列
######参考：https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-1143-longest-common-subsequence/
######思路：
// DP 状态量: dp[i][j] 代表最长公共子序列的长度
// DP 方程: 
// if (text1[i - 1] == text2[j - 1])
// dp[i][j] = dp[i - 1][j - 1] + 1
// else 
// dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])
######时空复杂度：
// 时空复杂度：
// 时间O(mn)
// 空间O(mn)->O(n)
######最优解法：
```
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();

        vector<vector<int>> dp(2, vector<int>(n + 1, 0));

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if(text1[i - 1] == text2[j - 1]) {
                    dp[1][j] = dp[0][j - 1] + 1;
                } else {
                    dp[1][j] = max(dp[1][j - 1], dp[0][j]);
                }
            }
            swap(dp[0], dp[1]);
        }
        return dp[0][n];
    }
};

```
######初始：
```
class Solution2 {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();

        vector<vector<int>> dp(m + 1, vector<int>(n + 1));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1[i - 1] == text2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }
};
```