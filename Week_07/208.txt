######题号：208. 实现 Trie (前缀树)
######参考：[https://zxi.mytechroad.com/blog/data-structure/leetcode-208-implement-trie-prefix-tree/](https://zxi.mytechroad.com/blog/data-structure/leetcode-208-implement-trie-prefix-tree/)
######思路：
// 建立一个TriNode节点类
// 弄一个智能指针root_
// inser word
```
    void insert(string word) {
        TrieNode* p = root_.get();
        for (const char& c : word) {
            if (!p->children[c - 'a']) {
                p->children[c - 'a'] = new TrieNode();
            }
            p = p->children[c - 'a'];
        }
        p->is_word = true;
    }
```
// find word


######关键点：

######时空复杂度：
// 时间O(l)
// 空间换时间，空间比较多
######最优解法：
```
class Trie {
public:
    /** Initialize your data structure here. */
    Trie(): root_(new TrieNode()) {}
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* p = root_.get();
        for (const char& c : word) {
            if (!p->children[c - 'a']) {
                p->children[c - 'a'] = new TrieNode();
            }
            p = p->children[c - 'a'];
        }
        p->is_word = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        const TrieNode* p = find(word);
        return p && p->is_word;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        return find(prefix) != nullptr;
    }

private:
    struct TrieNode {
        TrieNode() : is_word(false), children(26, nullptr) {}

        ~TrieNode() {
            for (TrieNode* child : children) {
                if (child) {
                    delete child;
                    child = nullptr;
                }
            }
        }
        bool is_word;
        vector<TrieNode*> children;
    };

    const TrieNode* find(const string& prefix) const {
        const TrieNode* p = root_.get();
        for (const char c : prefix) {
            p = p->children[c - 'a'];
            if (p == nullptr) break;
        }
        return p;
    }

    std::shared_ptr<TrieNode> root_;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
```
######变形题：
```

```
######其他：
```
```